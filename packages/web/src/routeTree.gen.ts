/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as MainRouteRouteImport } from './routes/_main/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SignupIndexRouteImport } from './routes/signup/index'
import { Route as SigninIndexRouteImport } from './routes/signin/index'
import { Route as DemoIndexRouteImport } from './routes/demo/index'
import { Route as MainGoalsNewRouteImport } from './routes/_main/goals.new'

const MainGoalsLazyRouteImport = createFileRoute('/_main/goals')()
const MainGoalsIdLazyRouteImport = createFileRoute('/_main/goals/$id')()

const MainRouteRoute = MainRouteRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/_main/route.lazy').then((d) => d.Route))
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))
const SignupIndexRoute = SignupIndexRouteImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/signup/index.lazy').then((d) => d.Route))
const SigninIndexRoute = SigninIndexRouteImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/signin/index.lazy').then((d) => d.Route))
const DemoIndexRoute = DemoIndexRouteImport.update({
  id: '/demo/',
  path: '/demo/',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/demo/index.lazy').then((d) => d.Route))
const MainGoalsLazyRoute = MainGoalsLazyRouteImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => MainRouteRoute,
} as any).lazy(() => import('./routes/_main/goals.lazy').then((d) => d.Route))
const MainGoalsIdLazyRoute = MainGoalsIdLazyRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => MainGoalsLazyRoute,
} as any).lazy(() =>
  import('./routes/_main/goals.$id.lazy').then((d) => d.Route),
)
const MainGoalsNewRoute = MainGoalsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MainGoalsLazyRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/goals': typeof MainGoalsLazyRouteWithChildren
  '/demo': typeof DemoIndexRoute
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/goals/new': typeof MainGoalsNewRoute
  '/goals/$id': typeof MainGoalsIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/goals': typeof MainGoalsLazyRouteWithChildren
  '/demo': typeof DemoIndexRoute
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/goals/new': typeof MainGoalsNewRoute
  '/goals/$id': typeof MainGoalsIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_main': typeof MainRouteRouteWithChildren
  '/_main/goals': typeof MainGoalsLazyRouteWithChildren
  '/demo/': typeof DemoIndexRoute
  '/signin/': typeof SigninIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/_main/goals/new': typeof MainGoalsNewRoute
  '/_main/goals/$id': typeof MainGoalsIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/goals'
    | '/demo'
    | '/signin'
    | '/signup'
    | '/goals/new'
    | '/goals/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/goals'
    | '/demo'
    | '/signin'
    | '/signup'
    | '/goals/new'
    | '/goals/$id'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/_main/goals'
    | '/demo/'
    | '/signin/'
    | '/signup/'
    | '/_main/goals/new'
    | '/_main/goals/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRouteRoute: typeof MainRouteRouteWithChildren
  DemoIndexRoute: typeof DemoIndexRoute
  SigninIndexRoute: typeof SigninIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signin/': {
      id: '/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/': {
      id: '/demo/'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_main/goals': {
      id: '/_main/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof MainGoalsLazyRouteImport
      parentRoute: typeof MainRouteRoute
    }
    '/_main/goals/$id': {
      id: '/_main/goals/$id'
      path: '/$id'
      fullPath: '/goals/$id'
      preLoaderRoute: typeof MainGoalsIdLazyRouteImport
      parentRoute: typeof MainGoalsLazyRoute
    }
    '/_main/goals/new': {
      id: '/_main/goals/new'
      path: '/new'
      fullPath: '/goals/new'
      preLoaderRoute: typeof MainGoalsNewRouteImport
      parentRoute: typeof MainGoalsLazyRoute
    }
  }
}

interface MainGoalsLazyRouteChildren {
  MainGoalsNewRoute: typeof MainGoalsNewRoute
  MainGoalsIdLazyRoute: typeof MainGoalsIdLazyRoute
}

const MainGoalsLazyRouteChildren: MainGoalsLazyRouteChildren = {
  MainGoalsNewRoute: MainGoalsNewRoute,
  MainGoalsIdLazyRoute: MainGoalsIdLazyRoute,
}

const MainGoalsLazyRouteWithChildren = MainGoalsLazyRoute._addFileChildren(
  MainGoalsLazyRouteChildren,
)

interface MainRouteRouteChildren {
  MainGoalsLazyRoute: typeof MainGoalsLazyRouteWithChildren
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainGoalsLazyRoute: MainGoalsLazyRouteWithChildren,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRouteRoute: MainRouteRouteWithChildren,
  DemoIndexRoute: DemoIndexRoute,
  SigninIndexRoute: SigninIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
