/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainRouteImport } from './routes/_main/route'
import { Route as IndexImport } from './routes/index'
import { Route as SignupIndexImport } from './routes/signup/index'
import { Route as SigninIndexImport } from './routes/signin/index'
import { Route as MainGoalsNewImport } from './routes/_main/goals.new'

// Create Virtual Routes

const MainGoalsLazyImport = createFileRoute('/_main/goals')()
const MainGoalsIdLazyImport = createFileRoute('/_main/goals/$id')()

// Create/Update Routes

const MainRouteRoute = MainRouteImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/_main/route.lazy').then((d) => d.Route))

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SignupIndexRoute = SignupIndexImport.update({
  id: '/signup/',
  path: '/signup/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signup/index.lazy').then((d) => d.Route))

const SigninIndexRoute = SigninIndexImport.update({
  id: '/signin/',
  path: '/signin/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/signin/index.lazy').then((d) => d.Route))

const MainGoalsLazyRoute = MainGoalsLazyImport.update({
  id: '/goals',
  path: '/goals',
  getParentRoute: () => MainRouteRoute,
} as any).lazy(() => import('./routes/_main/goals.lazy').then((d) => d.Route))

const MainGoalsIdLazyRoute = MainGoalsIdLazyImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => MainGoalsLazyRoute,
} as any).lazy(() =>
  import('./routes/_main/goals.$id.lazy').then((d) => d.Route),
)

const MainGoalsNewRoute = MainGoalsNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => MainGoalsLazyRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainRouteImport
      parentRoute: typeof rootRoute
    }
    '/_main/goals': {
      id: '/_main/goals'
      path: '/goals'
      fullPath: '/goals'
      preLoaderRoute: typeof MainGoalsLazyImport
      parentRoute: typeof MainRouteImport
    }
    '/signin/': {
      id: '/signin/'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninIndexImport
      parentRoute: typeof rootRoute
    }
    '/signup/': {
      id: '/signup/'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupIndexImport
      parentRoute: typeof rootRoute
    }
    '/_main/goals/new': {
      id: '/_main/goals/new'
      path: '/new'
      fullPath: '/goals/new'
      preLoaderRoute: typeof MainGoalsNewImport
      parentRoute: typeof MainGoalsLazyImport
    }
    '/_main/goals/$id': {
      id: '/_main/goals/$id'
      path: '/$id'
      fullPath: '/goals/$id'
      preLoaderRoute: typeof MainGoalsIdLazyImport
      parentRoute: typeof MainGoalsLazyImport
    }
  }
}

// Create and export the route tree

interface MainGoalsLazyRouteChildren {
  MainGoalsNewRoute: typeof MainGoalsNewRoute
  MainGoalsIdLazyRoute: typeof MainGoalsIdLazyRoute
}

const MainGoalsLazyRouteChildren: MainGoalsLazyRouteChildren = {
  MainGoalsNewRoute: MainGoalsNewRoute,
  MainGoalsIdLazyRoute: MainGoalsIdLazyRoute,
}

const MainGoalsLazyRouteWithChildren = MainGoalsLazyRoute._addFileChildren(
  MainGoalsLazyRouteChildren,
)

interface MainRouteRouteChildren {
  MainGoalsLazyRoute: typeof MainGoalsLazyRouteWithChildren
}

const MainRouteRouteChildren: MainRouteRouteChildren = {
  MainGoalsLazyRoute: MainGoalsLazyRouteWithChildren,
}

const MainRouteRouteWithChildren = MainRouteRoute._addFileChildren(
  MainRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof MainRouteRouteWithChildren
  '/goals': typeof MainGoalsLazyRouteWithChildren
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/goals/new': typeof MainGoalsNewRoute
  '/goals/$id': typeof MainGoalsIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof MainRouteRouteWithChildren
  '/goals': typeof MainGoalsLazyRouteWithChildren
  '/signin': typeof SigninIndexRoute
  '/signup': typeof SignupIndexRoute
  '/goals/new': typeof MainGoalsNewRoute
  '/goals/$id': typeof MainGoalsIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_main': typeof MainRouteRouteWithChildren
  '/_main/goals': typeof MainGoalsLazyRouteWithChildren
  '/signin/': typeof SigninIndexRoute
  '/signup/': typeof SignupIndexRoute
  '/_main/goals/new': typeof MainGoalsNewRoute
  '/_main/goals/$id': typeof MainGoalsIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/goals'
    | '/signin'
    | '/signup'
    | '/goals/new'
    | '/goals/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/goals' | '/signin' | '/signup' | '/goals/new' | '/goals/$id'
  id:
    | '__root__'
    | '/'
    | '/_main'
    | '/_main/goals'
    | '/signin/'
    | '/signup/'
    | '/_main/goals/new'
    | '/_main/goals/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MainRouteRoute: typeof MainRouteRouteWithChildren
  SigninIndexRoute: typeof SigninIndexRoute
  SignupIndexRoute: typeof SignupIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MainRouteRoute: MainRouteRouteWithChildren,
  SigninIndexRoute: SigninIndexRoute,
  SignupIndexRoute: SignupIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_main",
        "/signin/",
        "/signup/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_main": {
      "filePath": "_main/route.tsx",
      "children": [
        "/_main/goals"
      ]
    },
    "/_main/goals": {
      "filePath": "_main/goals.lazy.tsx",
      "parent": "/_main",
      "children": [
        "/_main/goals/new",
        "/_main/goals/$id"
      ]
    },
    "/signin/": {
      "filePath": "signin/index.tsx"
    },
    "/signup/": {
      "filePath": "signup/index.tsx"
    },
    "/_main/goals/new": {
      "filePath": "_main/goals.new.tsx",
      "parent": "/_main/goals"
    },
    "/_main/goals/$id": {
      "filePath": "_main/goals.$id.lazy.tsx",
      "parent": "/_main/goals"
    }
  }
}
ROUTE_MANIFEST_END */
